{"ast":null,"code":"import _slicedToArray from\"/home/tuto/cours/js/ecom/backend/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";import{Link}from\"react-router-dom\";import{Form,Button}from\"react-bootstrap\";import{useDispatch,useSelector}from\"react-redux\";import Loader from\"../components/Loader\";import Message from\"../components/Message\";import FormContainer from\"../components/FormContainer\";import{getUserDetails,updateUser}from\"../actions/userActions\";import{USER_DETAILS_FAIL,USER_UPDATE_RESET}from\"../constants/userConstants\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var UserEditScreen=function UserEditScreen(_ref){var match=_ref.match,history=_ref.history;// Admin update component\nvar userId=match.params.id;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),name=_useState2[0],setName=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),email=_useState4[0],setEmail=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isAdmin=_useState6[0],setIsAdmin=_useState6[1];var dispatch=useDispatch();var userDetails=useSelector(function(state){return state.userDetails;});var error=userDetails.error,loading=userDetails.loading,user=userDetails.user;var userUpdate=useSelector(function(state){return state.userUpdate;});var errorUpdate=userUpdate.error,loadingUpdate=userUpdate.loading,successUpdate=userUpdate.success;useEffect(function(){if(successUpdate){dispatch({type:USER_UPDATE_RESET});history.push(\"/admin/userlist\");}else{if(!user.name||user._id!==Number(userId)){dispatch(getUserDetails(userId));}else{setName(user.name);setEmail(user.email);setIsAdmin(user.isAdmin);}}},[user,userId,successUpdate,history]);var submitHandler=function submitHandler(e){e.preventDefault();dispatch(updateUser({_id:user._id,name:name,email:email,isAdmin:isAdmin}));};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Link,{to:\"/admin/userlist\",children:\"Go Back\"}),/*#__PURE__*/_jsxs(FormContainer,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Edit User\"}),loadingUpdate&&/*#__PURE__*/_jsx(Loader,{}),errorUpdate&&/*#__PURE__*/_jsx(Message,{variant:\"danger\",children:errorUpdate}),loading?/*#__PURE__*/_jsx(Loader,{}):error?/*#__PURE__*/_jsxs(Message,{variant:\"danger\",children:[\" \",error,\" \"]}):/*#__PURE__*/_jsxs(Form,{onSubmit:submitHandler,children:[/*#__PURE__*/_jsxs(Form.Group,{controlId:\"name\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Name\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"name\",placeholder:\"Enter Name\",value:name,onChange:function onChange(e){return setName(e.target.value);}})]}),/*#__PURE__*/_jsxs(Form.Group,{controlId:\"email\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Email Address\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"email\",placeholder:\"Enter Email\",value:email,onChange:function onChange(e){return setEmail(e.target.value);}})]}),/*#__PURE__*/_jsx(Form.Group,{controlId:\"isadmin\",children:/*#__PURE__*/_jsx(Form.Check,{type:\"checkbox\",label:\"Is Admin\",checked:isAdmin,onChange:function onChange(e){return setIsAdmin(e.target.checked);}})}),/*#__PURE__*/_jsx(Button,{type:\"submit\",variant:\"primary\",children:\"Update\"})]})]})]});};export default UserEditScreen;","map":{"version":3,"sources":["/home/tuto/cours/js/ecom/backend/frontend/src/screens/UserEditScreen.jsx"],"names":["useState","useEffect","Link","Form","Button","useDispatch","useSelector","Loader","Message","FormContainer","getUserDetails","updateUser","USER_DETAILS_FAIL","USER_UPDATE_RESET","UserEditScreen","match","history","userId","params","id","name","setName","email","setEmail","isAdmin","setIsAdmin","dispatch","userDetails","state","error","loading","user","userUpdate","errorUpdate","loadingUpdate","successUpdate","success","type","push","_id","Number","submitHandler","e","preventDefault","target","value","checked"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport FormContainer from \"../components/FormContainer\";\nimport { getUserDetails, updateUser } from \"../actions/userActions\";\nimport {\n  USER_DETAILS_FAIL,\n  USER_UPDATE_RESET,\n} from \"../constants/userConstants\";\n\nconst UserEditScreen = ({ match, history }) => {\n  // Admin update component\n  const userId = match.params.id;\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const userDetails = useSelector((state) => state.userDetails);\n  const { error, loading, user } = userDetails;\n\n  const userUpdate = useSelector((state) => state.userUpdate);\n  const {\n    error: errorUpdate,\n    loading: loadingUpdate,\n    success: successUpdate,\n  } = userUpdate;\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({ type: USER_UPDATE_RESET });\n      history.push(\"/admin/userlist\");\n    } else {\n      if (!user.name || user._id !== Number(userId)) {\n        dispatch(getUserDetails(userId));\n      } else {\n        setName(user.name);\n        setEmail(user.email);\n        setIsAdmin(user.isAdmin);\n      }\n    }\n  }, [user, userId, successUpdate, history]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(updateUser({ _id: user._id, name, email, isAdmin }));\n  };\n  return (\n    <div>\n      {/* back to users list */}\n      <Link to=\"/admin/userlist\">Go Back</Link>\n      {/*  Edit user */}\n      <FormContainer>\n        <h1>Edit User</h1>\n        {loadingUpdate && <Loader />}\n        {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\n\n        {loading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant=\"danger\"> {error} </Message>\n        ) : (\n          <Form onSubmit={submitHandler}>\n            {/* Name */}\n            <Form.Group controlId=\"name\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type=\"name\"\n                placeholder=\"Enter Name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n            {/* Email */}\n            <Form.Group controlId=\"email\">\n              <Form.Label>Email Address</Form.Label>\n              <Form.Control\n                type=\"email\"\n                placeholder=\"Enter Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n            {/* Is Admin */}\n            <Form.Group controlId=\"isadmin\">\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Is Admin\"\n                checked={isAdmin}\n                onChange={(e) => setIsAdmin(e.target.checked)}\n              ></Form.Check>\n            </Form.Group>\n            <Button type=\"submit\" variant=\"primary\">\n              Update\n            </Button>\n          </Form>\n        )}\n      </FormContainer>\n    </div>\n  );\n};\n\nexport default UserEditScreen;\n"]},"metadata":{},"sourceType":"module"}